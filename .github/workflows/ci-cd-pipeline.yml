name: FreedmAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'uat'
        type: choice
        options:
        - uat
        - staging
        - production
      services:
        description: 'Services to deploy (comma-separated or "all")'
        required: true
        default: 'all'

env:
  ECR_REGISTRY: 339713159370.dkr.ecr.us-east-1.amazonaws.com
  AWS_REGION: us-east-1

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.services }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Detect changed services
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.services }}" = "all" ]; then
              echo "services=api-gateway,auth-service,billing-service,payment-service,user-service,notification-service" >> $GITHUB_OUTPUT
            else
              echo "services=${{ github.event.inputs.services }}" >> $GITHUB_OUTPUT
            fi
          else
            # Detect changed services based on file changes
            CHANGED_SERVICES=""
            for service in api-gateway auth-service billing-service payment-service user-service notification-service; do
              if git diff --name-only HEAD~1 HEAD | grep -q "^$service/"; then
                if [ -z "$CHANGED_SERVICES" ]; then
                  CHANGED_SERVICES="$service"
                else
                  CHANGED_SERVICES="$CHANGED_SERVICES,$service"
                fi
              fi
            done
            if [ -z "$CHANGED_SERVICES" ]; then
              CHANGED_SERVICES="all"
            fi
            echo "services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: |
          services="${{ steps.changes.outputs.services }}"
          IFS=',' read -ra SERVICE_ARRAY <<< "$services"
          for service in "${SERVICE_ARRAY[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Installing dependencies for $service"
              cd $service && npm ci && cd ..
            fi
          done

      - name: ESLint Code Quality
        run: |
          services="${{ steps.changes.outputs.services }}"
          IFS=',' read -ra SERVICE_ARRAY <<< "$services"
          for service in "${SERVICE_ARRAY[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Running ESLint for $service"
              cd $service && npm run lint || true && cd ..
            fi
          done

      - name: Run Unit Tests
        run: |
          services="${{ steps.changes.outputs.services }}"
          IFS=',' read -ra SERVICE_ARRAY <<< "$services"
          for service in "${SERVICE_ARRAY[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Running tests for $service"
              cd $service && npm test || true && cd ..
            fi
          done

      - name: Security Audit
        run: |
          services="${{ steps.changes.outputs.services }}"
          IFS=',' read -ra SERVICE_ARRAY <<< "$services"
          for service in "${SERVICE_ARRAY[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Security audit for $service"
              cd $service && npm audit --audit-level=high || true && cd ..
            fi
          done

      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and Push Docker Images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, billing-service, payment-service, user-service, notification-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if service changed
        id: check-changes
        run: |
          services="${{ needs.code-quality.outputs.changed-services }}"
          if [[ "$services" == "all" ]] || [[ "$services" == *"${{ matrix.service }}"* ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "build=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        if: steps.check-changes.outputs.build == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check-changes.outputs.build == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        if: steps.check-changes.outputs.build == 'true'
        run: |
          cd ${{ matrix.service }}
          
          # Create optimized Dockerfile if not exists
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile << EOF
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY src/ ./src/
          RUN mkdir -p logs
          RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
          RUN chown -R nodejs:nodejs /app
          USER nodejs
          EXPOSE 3000
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"
          CMD ["npm", "start"]
          EOF
          fi
          
          # Build and tag image
          IMAGE_TAG=${GITHUB_SHA::8}
          docker build -t $ECR_REGISTRY/freedmai-${{ matrix.service }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/freedmai-${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/freedmai-${{ matrix.service }}:latest

      - name: Vulnerability scan
        if: steps.check-changes.outputs.build == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/freedmai-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Push to ECR
        if: steps.check-changes.outputs.build == 'true'
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          docker push $ECR_REGISTRY/freedmai-${{ matrix.service }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/freedmai-${{ matrix.service }}:latest

      - name: Update deployment manifest
        if: steps.check-changes.outputs.build == 'true'
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          echo "freedmai-${{ matrix.service }}:$IMAGE_TAG" >> deployment-manifest.txt

      - name: Upload deployment manifest
        if: steps.check-changes.outputs.build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest-${{ matrix.service }}
          path: deployment-manifest.txt

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-push]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: freedmai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run integration tests
        run: |
          # Install test dependencies
          npm install -g newman
          
          # Run API integration tests
          if [ -f "tests/integration/api-tests.json" ]; then
            newman run tests/integration/api-tests.json
          fi

      - name: Performance tests
        run: |
          # Install Apache Bench for load testing
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # Run basic load test (if services are running)
          echo "Performance testing would run here"

  # Deploy to UAT
  deploy-uat:
    name: Deploy to UAT
    runs-on: self-hosted
    needs: [code-quality, build-and-push, integration-tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'uat')
    environment: 
      name: uat
      url: http://localhost:3000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment manifests
        uses: actions/download-artifact@v4
        with:
          pattern: deployment-manifest-*
          merge-multiple: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to UAT
        run: |
          # Set image tag
          IMAGE_TAG=${GITHUB_SHA::8}
          export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          export IMAGE_TAG=$IMAGE_TAG
          
          # Update docker-compose with new image tags
          services="${{ needs.code-quality.outputs.changed-services }}"
          if [ "$services" = "all" ]; then
            services="api-gateway,auth-service,billing-service,payment-service,user-service,notification-service"
          fi
          
          # Deploy services
          IFS=',' read -ra SERVICE_ARRAY <<< "$services"
          for service in "${SERVICE_ARRAY[@]}"; do
            echo "Deploying $service with tag $IMAGE_TAG"
            docker pull $ECR_REGISTRY/freedmai-$service:$IMAGE_TAG
          done
          
          # Restart services with new images
          docker-compose -f docker-compose-complete.yml down
          docker-compose -f docker-compose-complete.yml up -d

      - name: Health check
        run: |
          # Wait for services to start
          sleep 30
          
          # Run health checks
          services="api-gateway auth-service billing-service payment-service user-service notification-service"
          for service in $services; do
            port=$(echo $service | sed 's/.*-service/300/' | sed 's/api-gateway/3000/' | sed 's/auth/1/' | sed 's/billing/2/' | sed 's/payment/3/' | sed 's/user/4/' | sed 's/notification/5/')
            if curl -f http://localhost:$port/health; then
              echo "✅ $service health check passed"
            else
              echo "❌ $service health check failed"
              exit 1
            fi
          done

      - name: Run smoke tests
        run: |
          # Run comprehensive API tests
          if [ -f "./test-apis.sh" ]; then
            chmod +x ./test-apis.sh
            ./test-apis.sh
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 UAT deployment successful!"
          echo "Services deployed: ${{ needs.code-quality.outputs.changed-services }}"
          echo "Image tag: ${GITHUB_SHA::8}"
          echo "Deployment URL: http://localhost:3000"

  # Deploy to Production (with approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-uat]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://api.freedmai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production deployment
        run: |
          echo "🚀 Production deployment would happen here"
          echo "This requires manual approval in GitHub"
          echo "Services: ${{ needs.code-quality.outputs.changed-services }}"
          echo "Image tag: ${GITHUB_SHA::8}"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback to previous version
        run: |
          echo "🔄 Rolling back to previous deployment"
          # Get previous successful deployment
          # Restore previous docker images
          # Restart services
          docker-compose -f docker-compose-complete.yml restart
